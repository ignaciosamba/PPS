C51 COMPILER V9.53.0.0   ADCLUCHO                                                          04/21/2015 16:42:52 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE ADCLUCHO
OBJECT MODULE PLACED IN adclucho.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe adclucho.c DB OE BR INCDIR(C:\SiLabs\MCU\Inc)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F35x_ADC0_ExternalInput.c
   3          // Copyright 2006 Silicon Laboratories, Inc.
   4          // http://www.silabs.com
   5          //
   6          // Program Description:
   7          // --------------------
   8          //
   9          // This example code for the C8051F350 takes measurements from input A1N0.2
  10          // using ADC0 then prints the results to a terminal window via the UART.
  11          //
  12          // The system is clocked by the internal 24.5MHz oscillator. The completion of
  13          // this conversion in turn triggers an interrupt service routine (ISR). The ISR
  14          // calculates the ADC0 result into the equivalent mV and then prints the value
  15          // to the terminal via printf before starting another conversion.
  16          //
  17          // The analog multiplexer selects A1N2 as the positive ADC0 input.  This
  18          // port is configured as an analog input in the port initialization routine.
  19          // The negative ADC0 input is connected via mux to ground, which provides
  20          // for a single-ended ADC input.
  21          //
  22          // A 100kohm potentiometer may be connected as a voltage divider between
  23          // VREF and AGND on the terminal strip as shown below:
  24          //
  25          // ---------
  26          //          |
  27          //         o| VREF ----|
  28          //         o| GND   ---|<-|
  29          //         o| AIN2     |  |
  30          //         o|    |        |
  31          //         o|     --------
  32          //         o|
  33          //          |
  34          //----------
  35          // C8051F350-TB
  36          //
  37          // Terminal output is done via printf, which directs the characters to
  38          // UART0.
  39          //
  40          // F350 Delta-Sigma ADC
  41          // --------------------
  42          // Please see Silicon Labs Applicaton Note AN217 for more information
  43          // on the C8051F35x Delta-Sigma ADC.  AN217 can be found on the Applications
  44          // webpage by going to the Silicon Labs Microcontrollers homepage
  45          // (www.silabs.com -> select Microcontrollers under "Products at the top) and
  46          // clicking the gray link on the left.
  47          //
  48          // Direct link:
  49          //   http://www.silabs.com/products/microcontroller/applications.asp
  50          //
  51          // F350 Resources:
  52          // ---------------
  53          // Timer1: clocks UART
  54          //
  55          // How To Test:
C51 COMPILER V9.53.0.0   ADCLUCHO                                                          04/21/2015 16:42:52 PAGE 2   

  56          // ------------
  57          // 1) Download code to a 'F350 device on a C8051F350-TB development board
  58          // 2) Connect serial cable from the transceiver to a PC
  59          // 3) On the PC, open HyperTerminal (or any other terminal program) and connect
  60          //    to the COM port at <BAUDRATE> and 8-N-1
  61          // 4) Connect a variable voltage source (between 0 and Vref)
  62          //    to AIN2, or a potentiometer voltage divider as shown above.
  63          // 5) HyperTerminal will print the voltage measured by the device.
  64          //
  65          // FID:            35X000029
  66          // Target:         C8051F350
  67          // Tool chain:     Keil C51 7.50 / Keil EVAL C51
  68          // Command Line:   None
  69          //
  70          // Release 1.0
  71          //    -Initial Revision (SM / TP)
  72          //    - 8 NOV 2006
  73          
  74          //-----------------------------------------------------------------------------
  75          // Includes
  76          //-----------------------------------------------------------------------------
  77          
  78          #include <C8051F350.h>                 // SFR declarations
  79          #include <stdio.h>
  80          #include <adc.h>
  81          //-----------------------------------------------------------------------------
  82          // 16-bit SFR Definitions for 'F35x
  83          //-----------------------------------------------------------------------------
  84          
  85          sfr16 TMR2RL = 0xCA;                   // Timer2 reload value
  86          sfr16 TMR2 = 0xCC;                     // Timer2 counter
  87          sfr16 ADC0DEC = 0x9A;                  // ADC0 Decimation Ratio Register
  88          
  89          //-----------------------------------------------------------------------------
  90          // MAIN Routine
  91          //-----------------------------------------------------------------------------
  92          void main (void)
  93          {
  94   1         PCA0MD &= ~0x40;                    // WDTE = 0 (clear watchdog timer
  95   1                                             // enable) PCA0MD = PCA0MD and con el complemento de 0x40
  96   1      
  97   1         Oscillator_Init();                  // Initialize system clock
  98   1         Port_Init();                        // Initialize Crossbar and GPIO
  99   1         UART0_Init();                       // Initialize UART0 for printf's
 100   1         ADC0_Init();                        // Initialize ADC0
 101   1      
 102   1         AD0INT = 0;
 103   1         ADC0MD = 0x83;                      // Start continuous conversions
 104   1         EA = 1;                             // Enable global interrupts
 105   1      
 106   1         while (1) {                         // Spin forever
 107   2         }
 108   1      }
 109          
 110          //-----------------------------------------------------------------------------
 111          // Initialization Subroutines
 112          //-----------------------------------------------------------------------------
 113          
 114          //-----------------------------------------------------------------------------
 115          // Oscillator_Init
 116          //-----------------------------------------------------------------------------
 117          //
C51 COMPILER V9.53.0.0   ADCLUCHO                                                          04/21/2015 16:42:52 PAGE 3   

 118          // Return Value : None
 119          // Parameters   : None
 120          //
 121          // This routine initializes the system clock to use the internal 24.5MHz
 122          // oscillator as its clock source.  Also enables missing clock detector reset.
 123          //
 124          //-----------------------------------------------------------------------------
 125          void Oscillator_Init (void)
 126          {
 127   1         OSCICN = 0x83;                      // Configure internal oscillator for
 128   1                                             // its lowest frequency
 129   1         RSTSRC = 0x04;                      // Enable missing clock detector
 130   1      }
 131          
 132          //-----------------------------------------------------------------------------
 133          // Port_Init
 134          //-----------------------------------------------------------------------------
 135          //
 136          // Return Value : None
 137          // Parameters   : None
 138          //
 139          // This function initializes the GPIO and the Crossbar
 140          //
 141          // Pinout:
 142          //
 143          //   P0.4 - UART TX (digital, push-pull)
 144          //   P0.5 - UART RX (digital, open-drain)
 145          //
 146          //   AIN0.2 - ADC0 input
 147          //
 148          //-----------------------------------------------------------------------------
 149          void Port_Init (void)
 150          {
 151   1         XBR0 = 0x01;                        // UART0 Selected
 152   1         XBR1 = 0x40;                        // Enable crossbar and weak pull-ups
 153   1         P0MDOUT |= 0xD0;                    // TX, LEDs = Push-pull
 154   1      }
 155          
 156          //-----------------------------------------------------------------------------
 157          // UART0_Init
 158          //-----------------------------------------------------------------------------
 159          //
 160          // Return Value : None
 161          // Parameters   : None
 162          //
 163          // Configure the UART0 using Timer1, for <BAUDRATE> and 8-N-1.
 164          //
 165          //-----------------------------------------------------------------------------
 166          void UART0_Init (void)
 167          {
 168   1         SCON0 = 0x10;                       // SCON0: 8-bit variable bit rate
 169   1                                             //        level of STOP bit is ignored
 170   1                                             //        RX enabled
 171   1                                             //        ninth bits are zeros
 172   1                                             //        clear RI0 and TI0 bits
 173   1         if (SYSCLK/BAUDRATE/2/256 < 1) {
 174   2            TH1 = -(SYSCLK/BAUDRATE/2);
 175   2            CKCON |=  0x08;                  // T1M = 1; SCA1:0 = xx
 176   2         } else if (SYSCLK/BAUDRATE/2/256 < 4) {
 177   2            TH1 = -(SYSCLK/BAUDRATE/2/4);
 178   2            CKCON &= ~0x0B;                  // T1M = 0; SCA1:0 = 01
 179   2            CKCON |=  0x01;
C51 COMPILER V9.53.0.0   ADCLUCHO                                                          04/21/2015 16:42:52 PAGE 4   

 180   2         } else if (SYSCLK/BAUDRATE/2/256 < 12) {
 181   2            TH1 = -(SYSCLK/BAUDRATE/2/12);
 182   2            CKCON &= ~0x0B;                  // T1M = 0; SCA1:0 = 00
 183   2         } else if (SYSCLK/BAUDRATE/2/256 < 48) {
 184   2            TH1 = -(SYSCLK/BAUDRATE/2/48);
 185   2            CKCON &= ~0x0B;                  // T1M = 0; SCA1:0 = 10
 186   2            CKCON |=  0x02;
 187   2         } else {
 188   2            while (1);                       // Error.  Unsupported baud rate
 189   2         }
 190   1      
 191   1         TL1 = TH1;                          // Init Timer1
 192   1         TMOD &= ~0xf0;                      // TMOD: timer 1 in 8-bit autoreload
 193   1         TMOD |=  0x20;
 194   1         TR1 = 1;                            // START Timer1
 195   1         TI0 = 1;                            // Indicate TX0 ready
 196   1      }
 197          
 198          //-----------------------------------------------------------------------------
 199          // ADC0_Init
 200          //-----------------------------------------------------------------------------
 201          //
 202          // Return Value : None
 203          // Parameters   : None
 204          //
 205          // Initialize the ADC to use the temperature sensor. (non-differential)
 206          //
 207          //-----------------------------------------------------------------------------
 208          void ADC0_Init (void)
 209          {
 210   1         REF0CN |= 0x03;                     // Enable internal Vref
 211   1         ADC0CN = 0x00;                      // Gain = 1, Unipolar mode
 212   1         ADC0CF = 0x00;                      // Interrupts upon SINC3 filter output
 213   1                                             // and uses internal VREF
 214   1      
 215   1         ADC0CLK = (SYSCLK/MDCLK)-1;         // Generate MDCLK for modulator.
 216   1                                             // Ideally MDCLK = 2.4576MHz
 217   1      
 218   1         // Program decimation rate for desired OWR
 219   1         ADC0DEC = ((unsigned long) MDCLK / (unsigned long) OWR /
 220   1                    (unsigned long) 128) - 1;
 221   1      
 222   1         ADC0BUF = 0x00;                     // Turn off Input Buffers
 223   1         ADC0MUX = 0x08;                     // Select AIN0.0 
 224   1      
 225   1         ADC0MD = 0x81;                      // Start internal calibration
 226   1         while(AD0CALC != 1);                // Wait until calibration is complete
 227   1      
 228   1         EIE1   |= 0x08;                     // Enable ADC0 Interrupts
 229   1         ADC0MD  = 0x80;                     // Enable the ADC0 (IDLE Mode)
 230   1      }
 231          
 232          //-----------------------------------------------------------------------------
 233          // Interrupt Service Routines
 234          //-----------------------------------------------------------------------------
 235          
 236          //-----------------------------------------------------------------------------
 237          // ADC0_ISR
 238          //-----------------------------------------------------------------------------
 239          //
 240          // This ISR prints the result to the UART. The ISR is called after each ADC
 241          // conversion.
C51 COMPILER V9.53.0.0   ADCLUCHO                                                          04/21/2015 16:42:52 PAGE 5   

 242          //
 243          //-----------------------------------------------------------------------------
 244          void ADC0_ISR (void) interrupt 10
 245          {
 246   1         static LONGDATA rawValue;
 247   1         unsigned long mV;
 248   1      
 249   1         while(!AD0INT);                     // Wait till conversion complete
 250   1         AD0INT = 0;                         // Clear ADC0 conversion complete flag
 251   1      
 252   1         // Copy the output value of the ADC
 253   1         rawValue.Byte[Byte3] = 0x00;
 254   1         rawValue.Byte[Byte2] = (unsigned char)ADC0H;
 255   1         rawValue.Byte[Byte1] = (unsigned char)ADC0M;
 256   1         rawValue.Byte[Byte0] = (unsigned char)ADC0L;
 257   1      
 258   1         //                           Vref (mV)
 259   1         //   measurement (mV) =   --------------- * result (bits)
 260   1         //                       (2^24)-1 (bits)
 261   1         //
 262   1         //   measurement (mV) =  result (bits) / ((2^24)-1 (bits) / Vref (mV))
 263   1         //
 264   1         //
 265   1         //   With a Vref (mV) of 2500:
 266   1         //
 267   1         //   measurement (mV) =  result (bits) / ((2^24)-1 / 2500)
 268   1         //
 269   1         //   measurement (mV) =  result (bits) / ((2^24)-1 / 2500)
 270   1         //
 271   1         //   measurement (mV) =  result (bits) / (16777215 / 2500)
 272   1         //
 273   1         //   measurement (mV) =  result (bits) / (6710)
 274   1      
 275   1         mV = rawValue.result / 6710;        // Because of bounds issues, this
 276   1                                             // calculation has been manipulated as
 277   1                                             // shown above
 278   1                                             // (i.e. 2500 (VREF) * 2^24 (ADC result)
 279   1                                             // is greater than 2^32)
 280   1      
 281   1        // printf("%x\n", ADC0MUX);
 282   1         if(ADC0MUX == 0x08)
 283   1         printf("AIN0.0 voltage: %4ld mV\n",mV);
 284   1         else if(ADC0MUX == 0x18)
 285   1         printf("AIN0.1 voltage: %4ld mV\n",mV);
 286   1         else if(ADC0MUX == 0x28)
 287   1         printf("AIN0.2 voltage: %4ld mV\n",mV);
 288   1         else if(ADC0MUX == 0x38)
 289   1         printf("AIN0.3 voltage: %4ld mV\n",mV);
 290   1         else if(ADC0MUX == 0x48)
 291   1         printf("AIN0.4 voltage: %4ld mV\n",mV);
 292   1         else if(ADC0MUX == 0x58)
 293   1         printf("AIN0.5 voltage: %4ld mV\n",mV);
 294   1         else if(ADC0MUX == 0x68)
 295   1         printf("AIN0.6 voltage: %4ld mV\n",mV);
 296   1         else if(ADC0MUX == 0x78)
 297   1         printf("AIN0.7 voltage: %4ld mV\n",mV);
 298   1      
 299   1      
 300   1      
 301   1         //ADC0MUX ^= 0x10;                    // Alternate ADC input with AIN0.2 and AIN0.3
 302   1         if(ADC0MUX & 0x78)
 303   1            ADC0MUX = 0x08;
C51 COMPILER V9.53.0.0   ADCLUCHO                                                          04/21/2015 16:42:52 PAGE 6   

 304   1         else
 305   1         {
 306   2            ADC0MUX = ((ADC0MUX & 0xf0) >> 4) | ((ADC0MUX & 0x0f) << 4); //Swapeo los 4 MSB con los 4 LSB para a
             -umentar en uno el LSB
 307   2            ADC0MUX++;
 308   2            ADC0MUX = ((ADC0MUX & 0xf0) >> 4) | ((ADC0MUX & 0x0f) << 4); //Swapeo una vez mas asi me queda incre
             -mentado los 4 MSB y asi me movi de puerto. 
 309   2         }
 310   1      
 311   1      }
 312          
 313          //-----------------------------------------------------------------------------
 314          // End Of File
 315          //-----------------------------------------------------------------------------
*** WARNING C294 IN LINE 177 OF adclucho.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    446    ----
   CONSTANT SIZE    =    200    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
